---
// import Welcome from '../components/Welcome.astro';
import Layout from '../layouts/Layout.astro';
import '@/styles/globals.css'
import { EventCard } from './EventCard'
import events from '@/assets/events.json'
import { pipe } from 'remeda'
import { parseNorwegianDate, formatNorwegianDate } from '@/lib/date-utils'

type Event = typeof events[number];
type EventGroups = Record<string, Event[]>;

const filterPublished = (events: Event[]): Event[] =>
	events.filter(event => event["Skal ut"] !== "FALSE");

const groupByDate = (events: Event[]): EventGroups =>
	Object.groupBy(events, (event): string => event.Dato || 'Udatert') as EventGroups;

const sortByDate = (dates: string[]): string[] =>
	dates.sort((a, b) => parseNorwegianDate(a).getTime() - parseNorwegianDate(b).getTime());

const { groupedEvents, sortedDates } = pipe(
	events,
	filterPublished,
	groupByDate,
	(grouped: EventGroups) => ({
		groupedEvents: grouped,
		sortedDates: sortByDate(Object.keys(grouped))
	})
);
---

<Layout>
	<div class="max-w-4xl mx-auto p-8">
		{sortedDates.map((date) => (
			<div class="mb-12">
				<h2 class="text-2xl font-bold mb-6 text-center">{formatNorwegianDate(date)}</h2>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-8 place-items-center">
					{groupedEvents[date].map((event) => (
						<EventCard client:load event={event} />
					))}
				</div>
			</div>
		))}
	</div>
</Layout>
	
	